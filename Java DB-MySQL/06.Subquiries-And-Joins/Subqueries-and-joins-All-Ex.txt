-- Subqueries and joins --

-- 1. Employee addresses -- 

select e.employee_id, e.job_title, e.address_id, a.address_text FROM employees as e
join addresses a on a.address_id = e.address_id
order by e.address_id
limit 5;

 -- 2. Addresses with towns -- 
 
select e.first_name, e.last_name, t.name as `town`, a.address_text from employees as e
join addresses as a
on a.address_id = e.address_id
join towns as t
on t.town_id = a.town_id
order by e.first_name, e.last_name
limit 5;

-- 3. Sales Employee -- 

select e.employee_id, e.first_name, e.last_name, d.department_id from employees as e
join departments as d
on d.department_id = e.department_id
where d.name = 'Sales'
order by e.employee_id desc;

-- 4. Employee Departments -- 

select e.employee_id, e.first_name, e.last_name, e.salary , d.name from employees as e
join departments as d
on d.department_id = e.department_id
where e.salary > 15000
order by d.department_id desc
limit 5;

 -- 5. Employees Without Project --
 
 select e.employee_id, e.first_name from employees as e
left join employees_projects as ep
on e.employee_id = ep.employee_id
where ep.project_id is null
order by e.employee_id desc
limit 3;

-- 6. Employee Hired After -- 

select e.first_name, e.last_name, e.hire_date, d.name as dept_name from employees as e
join departments as d
on d.department_id = e.department_id
where DATE(e.hire_date) > '1999-01-01' AND d.name in ('Sales', 'Finance')
order by e.hire_date;

-- 7. Employees with Projects -- 

select e.employee_id, e.first_name, p.name as project_name from employees as e
join employees_projects as ep
on e.employee_id = ep.employee_id
join projects p
on p.project_id = ep.project_id
where DATE(p.start_date) > '2002-08-13' AND p.end_date is null
order by e.first_name, project_name
limit 5;

-- 8. Employee 24 -- 

select e.employee_id, e.first_name, IF( YEAR(p2.start_date) >= '2005', null,p2.name )as  project_name  from employees as e
join employees_projects as p
on e.employee_id = p.employee_id
left join projects as p2
on p2.project_id = p.project_id
where e.employee_id = 24
order by  project_name;

-- 9. Employee Manager --

select e.employee_id, e.first_name, e.manager_id, m.first_name as manager_name from employees as e
join employees as m
on m.employee_id = e.manager_id
where e.manager_id in (3,7)
order by e.first_name;

-- 10. Employee Summary -- 

select e.employee_id,
CONCAT_WS(' ', e.first_name, e.last_name) as employee_name
, CONCAT_WS(' ', m.first_name, m.last_name) as manager_name, d.name as department_name from employees as e
join employees as m
    on m.employee_id = e.manager_id
join departments d
on d.department_id = e.department_id
where e.manager_id is not null
order by e.employee_id
limit 5;

-- 11. Min Average Salary -- 

select AVG(salary) as min_avg_salary from employees as e
group by department_id
order by min_avg_salary
limit 1;

 -- 12. Highest Peaks in Bulgaria -- 
 
 select c.country_code, m.mountain_range, p.peak_name, p.elevation  from countries as c
join mountains_countries as mc
on c.country_code = mc.country_code
join peaks as p on
mc.mountain_id = p.mountain_id
join mountains m
on m.id = mc.mountain_id
where c.country_code = 'BG' AND p.elevation > 2835
order by p.elevation desc;

-- 13. Count Mountain Ranges -- 

select c.country_code, COUNT(mc.mountain_id) as mountain_range from countries as c
join mountains_countries mc
on c.country_code = mc.country_code
where c.country_code IN ('BG', 'US', 'Ru')
group by c.country_code
order by mountain_range desc;

-- 14. Countries with Rivers -- 

select c.country_name, r.river_name from countries as c
left join countries_rivers cr
on c.country_code = cr.country_code
left join rivers r
on r.id = cr.river_id
join continents c2
on c2.continent_code = c.continent_code
where c2.continent_name = 'Africa'
order by c.country_name
limit 5;

-- 15. Continents and Currencies -- 

SELECT 
    c.continent_code,
    c.currency_code,
    COUNT(*) AS 'currency_usage'
FROM
    `countries` AS c
GROUP BY c.continent_code , c.currency_code
HAVING `currency_usage` > 1
    AND `currency_usage` = (SELECT 
        COUNT(*) AS cn
    FROM
        `countries` AS c2
    WHERE
        c2.continent_code = c.continent_code
    GROUP BY c2.currency_code
    ORDER BY cn DESC
    LIMIT 1)
ORDER BY c.continent_code , c.continent_code;

-- 16. Countries Without Mountains -- 

select count(c.country_code) as country_code from countries as c
left join mountains_countries as mc
on c.country_code = mc.country_code
where mc.country_code is null;

-- 17. Highest Peak and Longest River by country -- 

select c.country_name, MAX(p.elevation) as highest_peak_elevation,
       MAX(r.length) as longest_river_lenght from countries as c
join mountains_countries as mc
on c.country_code = mc.country_code
join mountains as m
on m.id = mc.mountain_id
join countries_rivers cr
on mc.country_code = cr.country_code
join rivers as r
on r.id = cr.river_id
join peaks as p
on m.id = p.mountain_id
group by c.country_name
order by highest_peak_elevation desc, longest_river_lenght desc
limit 5;
